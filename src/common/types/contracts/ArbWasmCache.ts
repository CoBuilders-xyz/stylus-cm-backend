/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ArbWasmCacheInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allCacheManagers"
      | "cacheCodehash"
      | "cacheProgram"
      | "codehashIsCached"
      | "evictCodehash"
      | "isCacheManager"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "UpdateProgramCache"): EventFragment;

  encodeFunctionData(
    functionFragment: "allCacheManagers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cacheCodehash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cacheProgram",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "codehashIsCached",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "evictCodehash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCacheManager",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "allCacheManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cacheCodehash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cacheProgram",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "codehashIsCached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "evictCodehash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCacheManager",
    data: BytesLike
  ): Result;
}

export namespace UpdateProgramCacheEvent {
  export type InputTuple = [
    manager: AddressLike,
    codehash: BytesLike,
    cached: boolean
  ];
  export type OutputTuple = [
    manager: string,
    codehash: string,
    cached: boolean
  ];
  export interface OutputObject {
    manager: string;
    codehash: string;
    cached: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArbWasmCache extends BaseContract {
  connect(runner?: ContractRunner | null): ArbWasmCache;
  waitForDeployment(): Promise<this>;

  interface: ArbWasmCacheInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allCacheManagers: TypedContractMethod<[], [string[]], "view">;

  cacheCodehash: TypedContractMethod<
    [codehash: BytesLike],
    [void],
    "nonpayable"
  >;

  cacheProgram: TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;

  codehashIsCached: TypedContractMethod<
    [codehash: BytesLike],
    [boolean],
    "view"
  >;

  evictCodehash: TypedContractMethod<
    [codehash: BytesLike],
    [void],
    "nonpayable"
  >;

  isCacheManager: TypedContractMethod<
    [manager: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allCacheManagers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "cacheCodehash"
  ): TypedContractMethod<[codehash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cacheProgram"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "codehashIsCached"
  ): TypedContractMethod<[codehash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "evictCodehash"
  ): TypedContractMethod<[codehash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isCacheManager"
  ): TypedContractMethod<[manager: AddressLike], [boolean], "view">;

  getEvent(
    key: "UpdateProgramCache"
  ): TypedContractEvent<
    UpdateProgramCacheEvent.InputTuple,
    UpdateProgramCacheEvent.OutputTuple,
    UpdateProgramCacheEvent.OutputObject
  >;

  filters: {
    "UpdateProgramCache(address,bytes32,bool)": TypedContractEvent<
      UpdateProgramCacheEvent.InputTuple,
      UpdateProgramCacheEvent.OutputTuple,
      UpdateProgramCacheEvent.OutputObject
    >;
    UpdateProgramCache: TypedContractEvent<
      UpdateProgramCacheEvent.InputTuple,
      UpdateProgramCacheEvent.OutputTuple,
      UpdateProgramCacheEvent.OutputObject
    >;
  };
}
