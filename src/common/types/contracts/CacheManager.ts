/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace CacheManager {
  export type EntryStruct = {
    code: BytesLike;
    size: BigNumberish;
    bid: BigNumberish;
  };

  export type EntryStructOutput = [code: string, size: bigint, bid: bigint] & {
    code: string;
    size: bigint;
    bid: bigint;
  };
}

export interface CacheManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cacheSize"
      | "decay"
      | "entries"
      | "evictAll"
      | "evictPrograms"
      | "getEntries"
      | "getMinBid(address)"
      | "getMinBid(bytes32)"
      | "getMinBid(uint64)"
      | "getSmallestEntries"
      | "initialize"
      | "isPaused"
      | "makeSpace"
      | "paused"
      | "placeBid"
      | "queueSize"
      | "setCacheSize"
      | "setDecayRate"
      | "sweepFunds"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DeleteBid"
      | "Initialized"
      | "InsertBid"
      | "Pause"
      | "SetCacheSize"
      | "SetDecayRate"
      | "Unpause"
  ): EventFragment;

  encodeFunctionData(functionFragment: "cacheSize", values?: undefined): string;
  encodeFunctionData(functionFragment: "decay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "entries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "evictAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "evictPrograms",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntries",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinBid(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinBid(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinBid(uint64)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSmallestEntries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "makeSpace",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "queueSize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setCacheSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDecayRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepFunds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "cacheSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "entries", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "evictAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "evictPrograms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEntries", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinBid(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinBid(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinBid(uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSmallestEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeSpace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queueSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCacheSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDecayRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweepFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace DeleteBidEvent {
  export type InputTuple = [
    codehash: BytesLike,
    bid: BigNumberish,
    size: BigNumberish
  ];
  export type OutputTuple = [codehash: string, bid: bigint, size: bigint];
  export interface OutputObject {
    codehash: string;
    bid: bigint;
    size: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InsertBidEvent {
  export type InputTuple = [
    codehash: BytesLike,
    program: AddressLike,
    bid: BigNumberish,
    size: BigNumberish
  ];
  export type OutputTuple = [
    codehash: string,
    program: string,
    bid: bigint,
    size: bigint
  ];
  export interface OutputObject {
    codehash: string;
    program: string;
    bid: bigint;
    size: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetCacheSizeEvent {
  export type InputTuple = [size: BigNumberish];
  export type OutputTuple = [size: bigint];
  export interface OutputObject {
    size: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDecayRateEvent {
  export type InputTuple = [decay: BigNumberish];
  export type OutputTuple = [decay: bigint];
  export interface OutputObject {
    decay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpauseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CacheManager extends BaseContract {
  connect(runner?: ContractRunner | null): CacheManager;
  waitForDeployment(): Promise<this>;

  interface: CacheManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cacheSize: TypedContractMethod<[], [bigint], "view">;

  decay: TypedContractMethod<[], [bigint], "view">;

  entries: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint, bigint] & { code: string; size: bigint; bid: bigint }],
    "view"
  >;

  evictAll: TypedContractMethod<[], [void], "nonpayable">;

  evictPrograms: TypedContractMethod<
    [count: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEntries: TypedContractMethod<
    [],
    [CacheManager.EntryStructOutput[]],
    "view"
  >;

  "getMinBid(address)": TypedContractMethod<
    [program: AddressLike],
    [bigint],
    "view"
  >;

  "getMinBid(bytes32)": TypedContractMethod<
    [codehash: BytesLike],
    [bigint],
    "view"
  >;

  "getMinBid(uint64)": TypedContractMethod<
    [size: BigNumberish],
    [bigint],
    "view"
  >;

  getSmallestEntries: TypedContractMethod<
    [k: BigNumberish],
    [CacheManager.EntryStructOutput[]],
    "view"
  >;

  initialize: TypedContractMethod<
    [initCacheSize: BigNumberish, initDecay: BigNumberish],
    [void],
    "nonpayable"
  >;

  isPaused: TypedContractMethod<[], [boolean], "view">;

  makeSpace: TypedContractMethod<[size: BigNumberish], [bigint], "payable">;

  paused: TypedContractMethod<[], [void], "nonpayable">;

  placeBid: TypedContractMethod<[program: AddressLike], [void], "payable">;

  queueSize: TypedContractMethod<[], [bigint], "view">;

  setCacheSize: TypedContractMethod<
    [newSize: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDecayRate: TypedContractMethod<
    [newDecay: BigNumberish],
    [void],
    "nonpayable"
  >;

  sweepFunds: TypedContractMethod<[], [void], "nonpayable">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cacheSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "entries"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint, bigint] & { code: string; size: bigint; bid: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "evictAll"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "evictPrograms"
  ): TypedContractMethod<[count: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getEntries"
  ): TypedContractMethod<[], [CacheManager.EntryStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getMinBid(address)"
  ): TypedContractMethod<[program: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinBid(bytes32)"
  ): TypedContractMethod<[codehash: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinBid(uint64)"
  ): TypedContractMethod<[size: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSmallestEntries"
  ): TypedContractMethod<
    [k: BigNumberish],
    [CacheManager.EntryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [initCacheSize: BigNumberish, initDecay: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "makeSpace"
  ): TypedContractMethod<[size: BigNumberish], [bigint], "payable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "placeBid"
  ): TypedContractMethod<[program: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "queueSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setCacheSize"
  ): TypedContractMethod<[newSize: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDecayRate"
  ): TypedContractMethod<[newDecay: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sweepFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "DeleteBid"
  ): TypedContractEvent<
    DeleteBidEvent.InputTuple,
    DeleteBidEvent.OutputTuple,
    DeleteBidEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "InsertBid"
  ): TypedContractEvent<
    InsertBidEvent.InputTuple,
    InsertBidEvent.OutputTuple,
    InsertBidEvent.OutputObject
  >;
  getEvent(
    key: "Pause"
  ): TypedContractEvent<
    PauseEvent.InputTuple,
    PauseEvent.OutputTuple,
    PauseEvent.OutputObject
  >;
  getEvent(
    key: "SetCacheSize"
  ): TypedContractEvent<
    SetCacheSizeEvent.InputTuple,
    SetCacheSizeEvent.OutputTuple,
    SetCacheSizeEvent.OutputObject
  >;
  getEvent(
    key: "SetDecayRate"
  ): TypedContractEvent<
    SetDecayRateEvent.InputTuple,
    SetDecayRateEvent.OutputTuple,
    SetDecayRateEvent.OutputObject
  >;
  getEvent(
    key: "Unpause"
  ): TypedContractEvent<
    UnpauseEvent.InputTuple,
    UnpauseEvent.OutputTuple,
    UnpauseEvent.OutputObject
  >;

  filters: {
    "DeleteBid(bytes32,uint192,uint64)": TypedContractEvent<
      DeleteBidEvent.InputTuple,
      DeleteBidEvent.OutputTuple,
      DeleteBidEvent.OutputObject
    >;
    DeleteBid: TypedContractEvent<
      DeleteBidEvent.InputTuple,
      DeleteBidEvent.OutputTuple,
      DeleteBidEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "InsertBid(bytes32,address,uint192,uint64)": TypedContractEvent<
      InsertBidEvent.InputTuple,
      InsertBidEvent.OutputTuple,
      InsertBidEvent.OutputObject
    >;
    InsertBid: TypedContractEvent<
      InsertBidEvent.InputTuple,
      InsertBidEvent.OutputTuple,
      InsertBidEvent.OutputObject
    >;

    "Pause()": TypedContractEvent<
      PauseEvent.InputTuple,
      PauseEvent.OutputTuple,
      PauseEvent.OutputObject
    >;
    Pause: TypedContractEvent<
      PauseEvent.InputTuple,
      PauseEvent.OutputTuple,
      PauseEvent.OutputObject
    >;

    "SetCacheSize(uint64)": TypedContractEvent<
      SetCacheSizeEvent.InputTuple,
      SetCacheSizeEvent.OutputTuple,
      SetCacheSizeEvent.OutputObject
    >;
    SetCacheSize: TypedContractEvent<
      SetCacheSizeEvent.InputTuple,
      SetCacheSizeEvent.OutputTuple,
      SetCacheSizeEvent.OutputObject
    >;

    "SetDecayRate(uint64)": TypedContractEvent<
      SetDecayRateEvent.InputTuple,
      SetDecayRateEvent.OutputTuple,
      SetDecayRateEvent.OutputObject
    >;
    SetDecayRate: TypedContractEvent<
      SetDecayRateEvent.InputTuple,
      SetDecayRateEvent.OutputTuple,
      SetDecayRateEvent.OutputObject
    >;

    "Unpause()": TypedContractEvent<
      UnpauseEvent.InputTuple,
      UnpauseEvent.OutputTuple,
      UnpauseEvent.OutputObject
    >;
    Unpause: TypedContractEvent<
      UnpauseEvent.InputTuple,
      UnpauseEvent.OutputTuple,
      UnpauseEvent.OutputObject
    >;
  };
}
