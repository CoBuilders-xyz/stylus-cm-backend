/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../common';

export declare namespace ICacheManagerAutomationV2 {
  export type ContractConfigStruct = {
    contractAddress: AddressLike;
    maxBid: BigNumberish;
    enabled: boolean;
  };

  export type ContractConfigStructOutput = [
    contractAddress: string,
    maxBid: bigint,
    enabled: boolean,
  ] & { contractAddress: string; maxBid: bigint; enabled: boolean };

  export type UserContractsDataStruct = {
    user: AddressLike;
    contracts: ICacheManagerAutomationV2.ContractConfigStruct[];
  };

  export type UserContractsDataStructOutput = [
    user: string,
    contracts: ICacheManagerAutomationV2.ContractConfigStructOutput[],
  ] & {
    user: string;
    contracts: ICacheManagerAutomationV2.ContractConfigStructOutput[];
  };

  export type BidRequestStruct = {
    user: AddressLike;
    contractAddress: AddressLike;
  };

  export type BidRequestStructOutput = [
    user: string,
    contractAddress: string,
  ] & { user: string; contractAddress: string };
}

export interface CacheManagerAutomationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'arbWasmCache'
      | 'cacheManager'
      | 'escrow'
      | 'fundBalance'
      | 'getContracts'
      | 'getContractsPaginated'
      | 'getTotalUsersCount'
      | 'getUserAtIndex'
      | 'getUserBalance'
      | 'getUserContracts'
      | 'initialize'
      | 'insertContract'
      | 'owner'
      | 'placeBids'
      | 'proxiableUUID'
      | 'removeAllContracts'
      | 'removeContract'
      | 'renounceOwnership'
      | 'transferOwnership'
      | 'updateContract'
      | 'upgradeTo'
      | 'upgradeToAndCall'
      | 'userContracts'
      | 'withdrawBalance',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'AdminChanged'
      | 'BalanceUpdated'
      | 'BeaconUpgraded'
      | 'BidAttempted'
      | 'BidDetails'
      | 'BidError'
      | 'BidPlaced'
      | 'ContractAdded'
      | 'ContractOperationPerformed'
      | 'ContractRemoved'
      | 'ContractUpdated'
      | 'DebugBidCheck'
      | 'DebugMinBidFetch'
      | 'Initialized'
      | 'MinBidCheck'
      | 'OwnershipTransferred'
      | 'Paused'
      | 'Unpaused'
      | 'Upgraded'
      | 'UpkeepPerformed'
      | 'UserBalanceOperation',
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'arbWasmCache',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'cacheManager',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'escrow', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'fundBalance',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getContracts',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getContractsPaginated',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getTotalUsersCount',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserAtIndex',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserBalance',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserContracts',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [AddressLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'insertContract',
    values: [AddressLike, BigNumberish, boolean],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'placeBids',
    values: [ICacheManagerAutomationV2.BidRequestStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'proxiableUUID',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'removeAllContracts',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'removeContract',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateContract',
    values: [AddressLike, BigNumberish, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'upgradeTo',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [AddressLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'userContracts',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawBalance',
    values?: undefined,
  ): string;

  decodeFunctionResult(
    functionFragment: 'arbWasmCache',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'cacheManager',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'escrow', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'fundBalance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getContracts',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getContractsPaginated',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTotalUsersCount',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserAtIndex',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserBalance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserContracts',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'insertContract',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'placeBids', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'proxiableUUID',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeAllContracts',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeContract',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateContract',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'upgradeToAndCall',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userContracts',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawBalance',
    data: BytesLike,
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BalanceUpdatedEvent {
  export type InputTuple = [user: AddressLike, newBalance: BigNumberish];
  export type OutputTuple = [user: string, newBalance: bigint];
  export interface OutputObject {
    user: string;
    newBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidAttemptedEvent {
  export type InputTuple = [
    user: AddressLike,
    contractAddress: AddressLike,
    bid: BigNumberish,
    success: boolean,
  ];
  export type OutputTuple = [
    user: string,
    contractAddress: string,
    bid: bigint,
    success: boolean,
  ];
  export interface OutputObject {
    user: string;
    contractAddress: string;
    bid: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidDetailsEvent {
  export type InputTuple = [
    user: AddressLike,
    contractAddress: AddressLike,
    bidAmount: BigNumberish,
    minBid: BigNumberish,
    maxBid: BigNumberish,
    userBalance: BigNumberish,
    success: boolean,
  ];
  export type OutputTuple = [
    user: string,
    contractAddress: string,
    bidAmount: bigint,
    minBid: bigint,
    maxBid: bigint,
    userBalance: bigint,
    success: boolean,
  ];
  export interface OutputObject {
    user: string;
    contractAddress: string;
    bidAmount: bigint;
    minBid: bigint;
    maxBid: bigint;
    userBalance: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidErrorEvent {
  export type InputTuple = [
    user: AddressLike,
    contractAddress: AddressLike,
    bid: BigNumberish,
    reason: string,
  ];
  export type OutputTuple = [
    user: string,
    contractAddress: string,
    bid: bigint,
    reason: string,
  ];
  export interface OutputObject {
    user: string;
    contractAddress: string;
    bid: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidPlacedEvent {
  export type InputTuple = [
    user: AddressLike,
    contractAddress: AddressLike,
    bidAmount: BigNumberish,
    maxBid: BigNumberish,
    userBalance: BigNumberish,
  ];
  export type OutputTuple = [
    user: string,
    contractAddress: string,
    bidAmount: bigint,
    maxBid: bigint,
    userBalance: bigint,
  ];
  export interface OutputObject {
    user: string;
    contractAddress: string;
    bidAmount: bigint;
    maxBid: bigint;
    userBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractAddedEvent {
  export type InputTuple = [
    user: AddressLike,
    contractAddress: AddressLike,
    maxBid: BigNumberish,
  ];
  export type OutputTuple = [
    user: string,
    contractAddress: string,
    maxBid: bigint,
  ];
  export interface OutputObject {
    user: string;
    contractAddress: string;
    maxBid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractOperationPerformedEvent {
  export type InputTuple = [
    user: AddressLike,
    contractAddress: AddressLike,
    operation: string,
    timestamp: BigNumberish,
  ];
  export type OutputTuple = [
    user: string,
    contractAddress: string,
    operation: string,
    timestamp: bigint,
  ];
  export interface OutputObject {
    user: string;
    contractAddress: string;
    operation: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractRemovedEvent {
  export type InputTuple = [user: AddressLike, contractAddress: AddressLike];
  export type OutputTuple = [user: string, contractAddress: string];
  export interface OutputObject {
    user: string;
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    contractAddress: AddressLike,
    maxBid: BigNumberish,
  ];
  export type OutputTuple = [
    user: string,
    contractAddress: string,
    maxBid: bigint,
  ];
  export interface OutputObject {
    user: string;
    contractAddress: string;
    maxBid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebugBidCheckEvent {
  export type InputTuple = [
    user: AddressLike,
    contractAddress: AddressLike,
    step: string,
  ];
  export type OutputTuple = [
    user: string,
    contractAddress: string,
    step: string,
  ];
  export interface OutputObject {
    user: string;
    contractAddress: string;
    step: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebugMinBidFetchEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    minBid: BigNumberish,
    success: boolean,
  ];
  export type OutputTuple = [
    contractAddress: string,
    minBid: bigint,
    success: boolean,
  ];
  export interface OutputObject {
    contractAddress: string;
    minBid: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinBidCheckEvent {
  export type InputTuple = [contractAddress: AddressLike, minBid: BigNumberish];
  export type OutputTuple = [contractAddress: string, minBid: bigint];
  export interface OutputObject {
    contractAddress: string;
    minBid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpkeepPerformedEvent {
  export type InputTuple = [
    totalContracts: BigNumberish,
    successfulBids: BigNumberish,
    failedBids: BigNumberish,
    timestamp: BigNumberish,
  ];
  export type OutputTuple = [
    totalContracts: bigint,
    successfulBids: bigint,
    failedBids: bigint,
    timestamp: bigint,
  ];
  export interface OutputObject {
    totalContracts: bigint;
    successfulBids: bigint;
    failedBids: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserBalanceOperationEvent {
  export type InputTuple = [
    user: AddressLike,
    operation: string,
    amount: BigNumberish,
    newBalance: BigNumberish,
    timestamp: BigNumberish,
  ];
  export type OutputTuple = [
    user: string,
    operation: string,
    amount: bigint,
    newBalance: bigint,
    timestamp: bigint,
  ];
  export interface OutputObject {
    user: string;
    operation: string;
    amount: bigint;
    newBalance: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CacheManagerAutomation extends BaseContract {
  connect(runner?: ContractRunner | null): CacheManagerAutomation;
  waitForDeployment(): Promise<this>;

  interface: CacheManagerAutomationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  arbWasmCache: TypedContractMethod<[], [string], 'view'>;

  cacheManager: TypedContractMethod<[], [string], 'view'>;

  escrow: TypedContractMethod<[], [string], 'view'>;

  fundBalance: TypedContractMethod<[], [void], 'payable'>;

  getContracts: TypedContractMethod<
    [],
    [ICacheManagerAutomationV2.UserContractsDataStructOutput[]],
    'view'
  >;

  getContractsPaginated: TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [
      [ICacheManagerAutomationV2.UserContractsDataStructOutput[], boolean] & {
        userData: ICacheManagerAutomationV2.UserContractsDataStructOutput[];
        hasMore: boolean;
      },
    ],
    'view'
  >;

  getTotalUsersCount: TypedContractMethod<[], [bigint], 'view'>;

  getUserAtIndex: TypedContractMethod<[index: BigNumberish], [string], 'view'>;

  getUserBalance: TypedContractMethod<[], [bigint], 'view'>;

  getUserContracts: TypedContractMethod<
    [],
    [ICacheManagerAutomationV2.ContractConfigStructOutput[]],
    'view'
  >;

  initialize: TypedContractMethod<
    [_cacheManager: AddressLike, _arbWasmCache: AddressLike],
    [void],
    'nonpayable'
  >;

  insertContract: TypedContractMethod<
    [_contract: AddressLike, _maxBid: BigNumberish, _enabled: boolean],
    [void],
    'payable'
  >;

  owner: TypedContractMethod<[], [string], 'view'>;

  placeBids: TypedContractMethod<
    [_bidRequests: ICacheManagerAutomationV2.BidRequestStruct[]],
    [void],
    'nonpayable'
  >;

  proxiableUUID: TypedContractMethod<[], [string], 'view'>;

  removeAllContracts: TypedContractMethod<[], [void], 'nonpayable'>;

  removeContract: TypedContractMethod<
    [_contract: AddressLike],
    [void],
    'nonpayable'
  >;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    'nonpayable'
  >;

  updateContract: TypedContractMethod<
    [_contract: AddressLike, _maxBid: BigNumberish, _enabled: boolean],
    [void],
    'nonpayable'
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    'nonpayable'
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    'payable'
  >;

  userContracts: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, boolean] & {
        contractAddress: string;
        maxBid: bigint;
        enabled: boolean;
      },
    ],
    'view'
  >;

  withdrawBalance: TypedContractMethod<[], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'arbWasmCache',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'cacheManager',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'escrow',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'fundBalance',
  ): TypedContractMethod<[], [void], 'payable'>;
  getFunction(
    nameOrSignature: 'getContracts',
  ): TypedContractMethod<
    [],
    [ICacheManagerAutomationV2.UserContractsDataStructOutput[]],
    'view'
  >;
  getFunction(nameOrSignature: 'getContractsPaginated'): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [
      [ICacheManagerAutomationV2.UserContractsDataStructOutput[], boolean] & {
        userData: ICacheManagerAutomationV2.UserContractsDataStructOutput[];
        hasMore: boolean;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getTotalUsersCount',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getUserAtIndex',
  ): TypedContractMethod<[index: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'getUserBalance',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getUserContracts',
  ): TypedContractMethod<
    [],
    [ICacheManagerAutomationV2.ContractConfigStructOutput[]],
    'view'
  >;
  getFunction(
    nameOrSignature: 'initialize',
  ): TypedContractMethod<
    [_cacheManager: AddressLike, _arbWasmCache: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'insertContract',
  ): TypedContractMethod<
    [_contract: AddressLike, _maxBid: BigNumberish, _enabled: boolean],
    [void],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'owner',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'placeBids',
  ): TypedContractMethod<
    [_bidRequests: ICacheManagerAutomationV2.BidRequestStruct[]],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'proxiableUUID',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'removeAllContracts',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'removeContract',
  ): TypedContractMethod<[_contract: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'renounceOwnership',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'transferOwnership',
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'updateContract',
  ): TypedContractMethod<
    [_contract: AddressLike, _maxBid: BigNumberish, _enabled: boolean],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'upgradeTo',
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'upgradeToAndCall',
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    'payable'
  >;
  getFunction(nameOrSignature: 'userContracts'): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, boolean] & {
        contractAddress: string;
        maxBid: bigint;
        enabled: boolean;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'withdrawBalance',
  ): TypedContractMethod<[], [void], 'nonpayable'>;

  getEvent(
    key: 'AdminChanged',
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: 'BalanceUpdated',
  ): TypedContractEvent<
    BalanceUpdatedEvent.InputTuple,
    BalanceUpdatedEvent.OutputTuple,
    BalanceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'BeaconUpgraded',
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: 'BidAttempted',
  ): TypedContractEvent<
    BidAttemptedEvent.InputTuple,
    BidAttemptedEvent.OutputTuple,
    BidAttemptedEvent.OutputObject
  >;
  getEvent(
    key: 'BidDetails',
  ): TypedContractEvent<
    BidDetailsEvent.InputTuple,
    BidDetailsEvent.OutputTuple,
    BidDetailsEvent.OutputObject
  >;
  getEvent(
    key: 'BidError',
  ): TypedContractEvent<
    BidErrorEvent.InputTuple,
    BidErrorEvent.OutputTuple,
    BidErrorEvent.OutputObject
  >;
  getEvent(
    key: 'BidPlaced',
  ): TypedContractEvent<
    BidPlacedEvent.InputTuple,
    BidPlacedEvent.OutputTuple,
    BidPlacedEvent.OutputObject
  >;
  getEvent(
    key: 'ContractAdded',
  ): TypedContractEvent<
    ContractAddedEvent.InputTuple,
    ContractAddedEvent.OutputTuple,
    ContractAddedEvent.OutputObject
  >;
  getEvent(
    key: 'ContractOperationPerformed',
  ): TypedContractEvent<
    ContractOperationPerformedEvent.InputTuple,
    ContractOperationPerformedEvent.OutputTuple,
    ContractOperationPerformedEvent.OutputObject
  >;
  getEvent(
    key: 'ContractRemoved',
  ): TypedContractEvent<
    ContractRemovedEvent.InputTuple,
    ContractRemovedEvent.OutputTuple,
    ContractRemovedEvent.OutputObject
  >;
  getEvent(
    key: 'ContractUpdated',
  ): TypedContractEvent<
    ContractUpdatedEvent.InputTuple,
    ContractUpdatedEvent.OutputTuple,
    ContractUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'DebugBidCheck',
  ): TypedContractEvent<
    DebugBidCheckEvent.InputTuple,
    DebugBidCheckEvent.OutputTuple,
    DebugBidCheckEvent.OutputObject
  >;
  getEvent(
    key: 'DebugMinBidFetch',
  ): TypedContractEvent<
    DebugMinBidFetchEvent.InputTuple,
    DebugMinBidFetchEvent.OutputTuple,
    DebugMinBidFetchEvent.OutputObject
  >;
  getEvent(
    key: 'Initialized',
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: 'MinBidCheck',
  ): TypedContractEvent<
    MinBidCheckEvent.InputTuple,
    MinBidCheckEvent.OutputTuple,
    MinBidCheckEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred',
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'Paused',
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: 'Unpaused',
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: 'Upgraded',
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: 'UpkeepPerformed',
  ): TypedContractEvent<
    UpkeepPerformedEvent.InputTuple,
    UpkeepPerformedEvent.OutputTuple,
    UpkeepPerformedEvent.OutputObject
  >;
  getEvent(
    key: 'UserBalanceOperation',
  ): TypedContractEvent<
    UserBalanceOperationEvent.InputTuple,
    UserBalanceOperationEvent.OutputTuple,
    UserBalanceOperationEvent.OutputObject
  >;

  filters: {
    'AdminChanged(address,address)': TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    'BalanceUpdated(address,uint256)': TypedContractEvent<
      BalanceUpdatedEvent.InputTuple,
      BalanceUpdatedEvent.OutputTuple,
      BalanceUpdatedEvent.OutputObject
    >;
    BalanceUpdated: TypedContractEvent<
      BalanceUpdatedEvent.InputTuple,
      BalanceUpdatedEvent.OutputTuple,
      BalanceUpdatedEvent.OutputObject
    >;

    'BeaconUpgraded(address)': TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    'BidAttempted(address,address,uint256,bool)': TypedContractEvent<
      BidAttemptedEvent.InputTuple,
      BidAttemptedEvent.OutputTuple,
      BidAttemptedEvent.OutputObject
    >;
    BidAttempted: TypedContractEvent<
      BidAttemptedEvent.InputTuple,
      BidAttemptedEvent.OutputTuple,
      BidAttemptedEvent.OutputObject
    >;

    'BidDetails(address,address,uint256,uint256,uint256,uint256,bool)': TypedContractEvent<
      BidDetailsEvent.InputTuple,
      BidDetailsEvent.OutputTuple,
      BidDetailsEvent.OutputObject
    >;
    BidDetails: TypedContractEvent<
      BidDetailsEvent.InputTuple,
      BidDetailsEvent.OutputTuple,
      BidDetailsEvent.OutputObject
    >;

    'BidError(address,address,uint256,string)': TypedContractEvent<
      BidErrorEvent.InputTuple,
      BidErrorEvent.OutputTuple,
      BidErrorEvent.OutputObject
    >;
    BidError: TypedContractEvent<
      BidErrorEvent.InputTuple,
      BidErrorEvent.OutputTuple,
      BidErrorEvent.OutputObject
    >;

    'BidPlaced(address,address,uint256,uint256,uint256)': TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;
    BidPlaced: TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;

    'ContractAdded(address,address,uint256)': TypedContractEvent<
      ContractAddedEvent.InputTuple,
      ContractAddedEvent.OutputTuple,
      ContractAddedEvent.OutputObject
    >;
    ContractAdded: TypedContractEvent<
      ContractAddedEvent.InputTuple,
      ContractAddedEvent.OutputTuple,
      ContractAddedEvent.OutputObject
    >;

    'ContractOperationPerformed(address,address,string,uint256)': TypedContractEvent<
      ContractOperationPerformedEvent.InputTuple,
      ContractOperationPerformedEvent.OutputTuple,
      ContractOperationPerformedEvent.OutputObject
    >;
    ContractOperationPerformed: TypedContractEvent<
      ContractOperationPerformedEvent.InputTuple,
      ContractOperationPerformedEvent.OutputTuple,
      ContractOperationPerformedEvent.OutputObject
    >;

    'ContractRemoved(address,address)': TypedContractEvent<
      ContractRemovedEvent.InputTuple,
      ContractRemovedEvent.OutputTuple,
      ContractRemovedEvent.OutputObject
    >;
    ContractRemoved: TypedContractEvent<
      ContractRemovedEvent.InputTuple,
      ContractRemovedEvent.OutputTuple,
      ContractRemovedEvent.OutputObject
    >;

    'ContractUpdated(address,address,uint256)': TypedContractEvent<
      ContractUpdatedEvent.InputTuple,
      ContractUpdatedEvent.OutputTuple,
      ContractUpdatedEvent.OutputObject
    >;
    ContractUpdated: TypedContractEvent<
      ContractUpdatedEvent.InputTuple,
      ContractUpdatedEvent.OutputTuple,
      ContractUpdatedEvent.OutputObject
    >;

    'DebugBidCheck(address,address,string)': TypedContractEvent<
      DebugBidCheckEvent.InputTuple,
      DebugBidCheckEvent.OutputTuple,
      DebugBidCheckEvent.OutputObject
    >;
    DebugBidCheck: TypedContractEvent<
      DebugBidCheckEvent.InputTuple,
      DebugBidCheckEvent.OutputTuple,
      DebugBidCheckEvent.OutputObject
    >;

    'DebugMinBidFetch(address,uint192,bool)': TypedContractEvent<
      DebugMinBidFetchEvent.InputTuple,
      DebugMinBidFetchEvent.OutputTuple,
      DebugMinBidFetchEvent.OutputObject
    >;
    DebugMinBidFetch: TypedContractEvent<
      DebugMinBidFetchEvent.InputTuple,
      DebugMinBidFetchEvent.OutputTuple,
      DebugMinBidFetchEvent.OutputObject
    >;

    'Initialized(uint8)': TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    'MinBidCheck(address,uint256)': TypedContractEvent<
      MinBidCheckEvent.InputTuple,
      MinBidCheckEvent.OutputTuple,
      MinBidCheckEvent.OutputObject
    >;
    MinBidCheck: TypedContractEvent<
      MinBidCheckEvent.InputTuple,
      MinBidCheckEvent.OutputTuple,
      MinBidCheckEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'Paused(address)': TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    'Unpaused(address)': TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    'Upgraded(address)': TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    'UpkeepPerformed(uint256,uint256,uint256,uint256)': TypedContractEvent<
      UpkeepPerformedEvent.InputTuple,
      UpkeepPerformedEvent.OutputTuple,
      UpkeepPerformedEvent.OutputObject
    >;
    UpkeepPerformed: TypedContractEvent<
      UpkeepPerformedEvent.InputTuple,
      UpkeepPerformedEvent.OutputTuple,
      UpkeepPerformedEvent.OutputObject
    >;

    'UserBalanceOperation(address,string,uint256,uint256,uint256)': TypedContractEvent<
      UserBalanceOperationEvent.InputTuple,
      UserBalanceOperationEvent.OutputTuple,
      UserBalanceOperationEvent.OutputObject
    >;
    UserBalanceOperation: TypedContractEvent<
      UserBalanceOperationEvent.InputTuple,
      UserBalanceOperationEvent.OutputTuple,
      UserBalanceOperationEvent.OutputObject
    >;
  };
}
