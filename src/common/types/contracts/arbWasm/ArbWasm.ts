/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ArbWasmInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activateProgram"
      | "blockCacheSize"
      | "codehashAsmSize"
      | "codehashKeepalive"
      | "codehashVersion"
      | "expiryDays"
      | "freePages"
      | "initCostScalar"
      | "inkPrice"
      | "keepaliveDays"
      | "maxStackDepth"
      | "minInitGas"
      | "pageGas"
      | "pageLimit"
      | "pageRamp"
      | "programInitGas"
      | "programMemoryFootprint"
      | "programTimeLeft"
      | "programVersion"
      | "stylusVersion"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ProgramActivated" | "ProgramLifetimeExtended"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activateProgram",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "blockCacheSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "codehashAsmSize",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "codehashKeepalive",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "codehashVersion",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "expiryDays",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "freePages", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initCostScalar",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "inkPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "keepaliveDays",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxStackDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minInitGas",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pageGas", values?: undefined): string;
  encodeFunctionData(functionFragment: "pageLimit", values?: undefined): string;
  encodeFunctionData(functionFragment: "pageRamp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "programInitGas",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "programMemoryFootprint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "programTimeLeft",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "programVersion",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stylusVersion",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activateProgram",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockCacheSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "codehashAsmSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "codehashKeepalive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "codehashVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expiryDays", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freePages", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initCostScalar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inkPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "keepaliveDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxStackDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minInitGas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pageGas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pageLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pageRamp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "programInitGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "programMemoryFootprint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "programTimeLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "programVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stylusVersion",
    data: BytesLike
  ): Result;
}

export namespace ProgramActivatedEvent {
  export type InputTuple = [
    codehash: BytesLike,
    moduleHash: BytesLike,
    program: AddressLike,
    dataFee: BigNumberish,
    version: BigNumberish
  ];
  export type OutputTuple = [
    codehash: string,
    moduleHash: string,
    program: string,
    dataFee: bigint,
    version: bigint
  ];
  export interface OutputObject {
    codehash: string;
    moduleHash: string;
    program: string;
    dataFee: bigint;
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProgramLifetimeExtendedEvent {
  export type InputTuple = [codehash: BytesLike, dataFee: BigNumberish];
  export type OutputTuple = [codehash: string, dataFee: bigint];
  export interface OutputObject {
    codehash: string;
    dataFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArbWasm extends BaseContract {
  connect(runner?: ContractRunner | null): ArbWasm;
  waitForDeployment(): Promise<this>;

  interface: ArbWasmInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activateProgram: TypedContractMethod<
    [program: AddressLike],
    [[bigint, bigint] & { version: bigint; dataFee: bigint }],
    "payable"
  >;

  blockCacheSize: TypedContractMethod<[], [bigint], "view">;

  codehashAsmSize: TypedContractMethod<[codehash: BytesLike], [bigint], "view">;

  codehashKeepalive: TypedContractMethod<
    [codehash: BytesLike],
    [void],
    "payable"
  >;

  codehashVersion: TypedContractMethod<[codehash: BytesLike], [bigint], "view">;

  expiryDays: TypedContractMethod<[], [bigint], "view">;

  freePages: TypedContractMethod<[], [bigint], "view">;

  initCostScalar: TypedContractMethod<[], [bigint], "view">;

  inkPrice: TypedContractMethod<[], [bigint], "view">;

  keepaliveDays: TypedContractMethod<[], [bigint], "view">;

  maxStackDepth: TypedContractMethod<[], [bigint], "view">;

  minInitGas: TypedContractMethod<
    [],
    [[bigint, bigint] & { gas: bigint; cached: bigint }],
    "view"
  >;

  pageGas: TypedContractMethod<[], [bigint], "view">;

  pageLimit: TypedContractMethod<[], [bigint], "view">;

  pageRamp: TypedContractMethod<[], [bigint], "view">;

  programInitGas: TypedContractMethod<
    [program: AddressLike],
    [[bigint, bigint] & { gas: bigint; gasWhenCached: bigint }],
    "view"
  >;

  programMemoryFootprint: TypedContractMethod<
    [program: AddressLike],
    [bigint],
    "view"
  >;

  programTimeLeft: TypedContractMethod<
    [program: AddressLike],
    [bigint],
    "view"
  >;

  programVersion: TypedContractMethod<[program: AddressLike], [bigint], "view">;

  stylusVersion: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activateProgram"
  ): TypedContractMethod<
    [program: AddressLike],
    [[bigint, bigint] & { version: bigint; dataFee: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "blockCacheSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "codehashAsmSize"
  ): TypedContractMethod<[codehash: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "codehashKeepalive"
  ): TypedContractMethod<[codehash: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "codehashVersion"
  ): TypedContractMethod<[codehash: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "expiryDays"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "freePages"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initCostScalar"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "inkPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "keepaliveDays"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxStackDepth"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minInitGas"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { gas: bigint; cached: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "pageGas"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pageLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pageRamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "programInitGas"
  ): TypedContractMethod<
    [program: AddressLike],
    [[bigint, bigint] & { gas: bigint; gasWhenCached: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "programMemoryFootprint"
  ): TypedContractMethod<[program: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "programTimeLeft"
  ): TypedContractMethod<[program: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "programVersion"
  ): TypedContractMethod<[program: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "stylusVersion"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ProgramActivated"
  ): TypedContractEvent<
    ProgramActivatedEvent.InputTuple,
    ProgramActivatedEvent.OutputTuple,
    ProgramActivatedEvent.OutputObject
  >;
  getEvent(
    key: "ProgramLifetimeExtended"
  ): TypedContractEvent<
    ProgramLifetimeExtendedEvent.InputTuple,
    ProgramLifetimeExtendedEvent.OutputTuple,
    ProgramLifetimeExtendedEvent.OutputObject
  >;

  filters: {
    "ProgramActivated(bytes32,bytes32,address,uint256,uint16)": TypedContractEvent<
      ProgramActivatedEvent.InputTuple,
      ProgramActivatedEvent.OutputTuple,
      ProgramActivatedEvent.OutputObject
    >;
    ProgramActivated: TypedContractEvent<
      ProgramActivatedEvent.InputTuple,
      ProgramActivatedEvent.OutputTuple,
      ProgramActivatedEvent.OutputObject
    >;

    "ProgramLifetimeExtended(bytes32,uint256)": TypedContractEvent<
      ProgramLifetimeExtendedEvent.InputTuple,
      ProgramLifetimeExtendedEvent.OutputTuple,
      ProgramLifetimeExtendedEvent.OutputObject
    >;
    ProgramLifetimeExtended: TypedContractEvent<
      ProgramLifetimeExtendedEvent.InputTuple,
      ProgramLifetimeExtendedEvent.OutputTuple,
      ProgramLifetimeExtendedEvent.OutputObject
    >;
  };
}
